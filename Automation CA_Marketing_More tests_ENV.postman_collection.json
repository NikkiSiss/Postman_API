{
	"info": {
		"_postman_id": "a70655f4-2232-4264-b35d-2edae3496183",
		"name": "Automation CA_Marketing_More tests_ENV",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21652075"
	},
	"item": [
		{
			"name": "Create new postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests [\"Backend is available, response code is 200\"]=true;\r",
							"}  else if (responseCode.code === 401) {\r",
							"    tests [\"Not authorised, Check assecc token or Log In\"]=false;\r",
							"}  else if (responseCode.code === 403) {\r",
							"    tests [\"Forbiden\"]=false;\r",
							"}  else if (responseCode.code === 404) {\r",
							"    tests [\"Not Found. Check if you made correct request\"]=false;\r",
							"}  else if (responseCode.code === 422) {\r",
							"    tests [\"The instance is not valid\"]=false;\r",
							"}  else {\r",
							"    tests [\"Something went wrong. Check response body\"]=false;\r",
							"}\r",
							"\r",
							"pm.test(\"Body contains string id\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
							"});\r",
							"\r",
							"tests[\"Response code is 200 OK\"]=responseCode.code===200;\r",
							"tests[\"Response Time is Acceptable\"]=responseTime < 1000;\r",
							"\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FN}}\",\r\n            \"lastName\": \"{{LN}}\"\r\n        },\r\n        \"company\": \"{{COMPANY}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"4534 Chicago Avenue\",\r\n        \"addressLine2\": null,\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"Fair Oaks\",\r\n        \"country\": \"USA\",\r\n        \"subdivision\": \"CA\",\r\n        \"zipCode\": \"95628\",\r\n        \"phoneNumber\": \"1234567788\",\r\n        \"location\": {\r\n            \"latitude\": 38.6476808,\r\n            \"longitude\": -121.2545633\r\n        }\r\n    },\r\n    \"setAsDefault\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}",
					"host": [
						"{{URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make new address default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests [\"Backend is available, response code is 200\"]=true;\r",
							"}  else if (responseCode.code === 401) {\r",
							"    tests [\"Not authorised, Check assecc token or Log In\"]=false;\r",
							"}  else if (responseCode.code === 403) {\r",
							"    tests [\"Forbiden\"]=false;\r",
							"}  else if (responseCode.code === 404) {\r",
							"    tests [\"Not Found. Check if you made correct request\"]=false;\r",
							"}  else if (responseCode.code === 422) {\r",
							"    tests [\"The instance is not valid\"]=false;\r",
							"}  else {\r",
							"    tests [\"Something went wrong. Check response body\"]=false;\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response size is less than 2000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
							"});\r",
							"\r",
							"tests[\"Response code is 200 OK\"]=responseCode.code===200;\r",
							"tests[\"Response Time is Acceptable\"]=responseTime < 500;\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string {}\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{ID}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/default",
					"host": [
						"{{URL}}"
					],
					"path": [
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show all postal addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests [\"Backend is available, response code is 200\"]=true;\r",
							"}  else if (responseCode.code === 401) {\r",
							"    tests [\"Not authorised, Check assecc token or Log In\"]=false;\r",
							"}  else if (responseCode.code === 403) {\r",
							"    tests [\"Forbiden\"]=false;\r",
							"}  else if (responseCode.code === 404) {\r",
							"    tests [\"Not Found. Check if you made correct request\"]=false;\r",
							"}  else if (responseCode.code === 422) {\r",
							"    tests [\"The instance is not valid\"]=false;\r",
							"}  else {\r",
							"    tests [\"Something went wrong. Check response body\"]=false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"New ID is in response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"cbaa3eef-2a0c-4140-a9af-1d439e77d4c3\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct ID\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 10KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}",
					"host": [
						"{{URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show new created postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests [\"Backend is available, response code is 200\"]=true;\r",
							"}  else if (responseCode.code === 401) {\r",
							"    tests [\"Not authorised, Check assecc token or Log In\"]=false;\r",
							"}  else if (responseCode.code === 403) {\r",
							"    tests [\"Forbiden\"]=false;\r",
							"}  else if (responseCode.code === 404) {\r",
							"    tests [\"Not Found. Check if you made correct request\"]=false;\r",
							"}  else if (responseCode.code === 422) {\r",
							"    tests [\"The instance is not valid\"]=false;\r",
							"}  else {\r",
							"    tests [\"Something went wrong. Check response body\"]=false;\r",
							"}\r",
							"\r",
							"pm.test(\"Body contains string id\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
							"});\r",
							"\r",
							"tests[\"Response code is 200 OK\"]=responseCode.code===200;\r",
							"tests[\"Response Time is Acceptable\"]=responseTime < 1000;\r",
							"\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"firstName is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Laura\");\r",
							"});\r",
							"\r",
							"pm.test(\"Entire response is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FN\"));\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LN\"));\r",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));\r",
							"    pm.expect(jsonData.address.country).to.eql(\"USA\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests [\"Backend is available, response code is 200\"]=true;\r",
							"}  else if (responseCode.code === 401) {\r",
							"    tests [\"Not authorised, Check assecc token or Log In\"]=false;\r",
							"}  else if (responseCode.code === 403) {\r",
							"    tests [\"Forbiden\"]=false;\r",
							"}  else if (responseCode.code === 404) {\r",
							"    tests [\"Not Found. Check if you made correct request\"]=false;\r",
							"}  else if (responseCode.code === 422) {\r",
							"    tests [\"The instance is not valid\"]=false;\r",
							"}  else {\r",
							"    tests [\"Something went wrong. Check response body\"]=false;\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
							"});\r",
							"\r",
							"tests[\"Response code is 200 OK\"]=responseCode.code===200;\r",
							"tests[\"Response Time is Acceptable\"]=responseTime < 1500;\r",
							"\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"id\": \"{{ID}}\",\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FN_NEW}}\",\r\n            \"lastName\": \"{{LN_NEW}}\"\r\n        },\r\n        \"company\": \"{{COMPANY_NEW}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"4534 Chicago Avenue\",\r\n        \"addressLine2\": null,\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"Fair Oaks\",\r\n        \"country\": \"USA\",\r\n        \"subdivision\": \"CA\",\r\n        \"zipCode\": \"95628\",\r\n        \"phoneNumber\": \"1234567788\",\r\n        \"location\": {\r\n            \"latitude\": 38.6476808,\r\n            \"longitude\": -121.2545633\r\n        }\r\n    },\r\n    \"setAsDefault\": true,\r\n    \"fieldMask\": {\r\n        \"paths\": [\r\n            \"fullName.firstName\",\r\n            \"fullName.lastName\",\r\n            \"company\",\r\n            \"addressLine1\",\r\n            \"city\",\r\n            \"country\",\r\n            \"subdivision\",\r\n            \"zipCode\",\r\n            \"phoneNumber\",\r\n            \"location.latitude\",\r\n            \"location.longitude\",\r\n            \"setAsDefault\"\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show changed postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests [\"Backend is available, response code is 200\"]=true;\r",
							"}  else if (responseCode.code === 401) {\r",
							"    tests [\"Not authorised, Check assecc token or Log In\"]=false;\r",
							"}  else if (responseCode.code === 403) {\r",
							"    tests [\"Forbiden\"]=false;\r",
							"}  else if (responseCode.code === 404) {\r",
							"    tests [\"Not Found. Check if you made correct request\"]=false;\r",
							"}  else if (responseCode.code === 422) {\r",
							"    tests [\"The instance is not valid\"]=false;\r",
							"}  else {\r",
							"    tests [\"Something went wrong. Check response body\"]=false;\r",
							"}\r",
							"\r",
							"pm.test(\"Body contains string id\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
							"});\r",
							"\r",
							"tests[\"Response code is 200 OK\"]=responseCode.code===200;\r",
							"tests[\"Response Time is Acceptable\"]=responseTime < 3000;\r",
							"\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Company's name is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.company).to.eql(\"Robot2\");\r",
							"});\r",
							"\r",
							"pm.test(\"Company is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.company===(pm.environment.get(\"COMPANY_NEW\"));\r",
							" });\r",
							"\r",
							"pm.test(\"Company,ID,FN and LN are correct after update\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FN_NEW\"));\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LN_NEW\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests [\"Backend is available, response code is 200\"]=true;\r",
							"}  else if (responseCode.code === 401) {\r",
							"    tests [\"Not authorised, Check assecc token or Log In\"]=false;\r",
							"}  else if (responseCode.code === 403) {\r",
							"    tests [\"Forbiden\"]=false;\r",
							"}  else if (responseCode.code === 404) {\r",
							"    tests [\"Not Found. Check if you made correct request\"]=false;\r",
							"}  else if (responseCode.code === 422) {\r",
							"    tests [\"The instance is not valid\"]=false;\r",
							"}  else {\r",
							"    tests [\"Something went wrong. Check response body\"]=false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 10KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);\r",
							"});\r",
							"\r",
							"pm.test(\"Order has been deleted,OK\", function() {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.an(\"object\");\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"    pm.response.to.have.jsonBody({});\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check deleted postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests [\"Backend is available, response code is 200\"]=false;\r",
							"}  else if (responseCode.code === 400) {\r",
							"    tests [\"Bad request response is expected\"]=true;\r",
							"}  else if (responseCode.code === 403) {\r",
							"    tests [\"Forbiden\"]=false;\r",
							"}  else if (responseCode.code === 404) {\r",
							"    tests [\"Not Found. Check if you made correct request\"]=false;\r",
							"}  else if (responseCode.code === 422) {\r",
							"    tests [\"The instance is not valid\"]=false;\r",
							"}  else {\r",
							"    tests [\"Something went wrong. Check response body\"]=false;\r",
							"}\r",
							"\r",
							"pm.test(\"ID is in response\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"'Details' is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonResponse.message).to.be.a('string');\r",
							"    pm.expect(jsonResponse.details).to.be.a('object');\r",
							"    pm.expect(jsonResponse.details.cant_find).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete address 2nd time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests [\"Backend is available, response code is 200\"]=false;\r",
							"}  else if (responseCode.code === 400) {\r",
							"    tests [\"Bad request response is expected\"]=true;\r",
							"}  else if (responseCode.code === 403) {\r",
							"    tests [\"Forbiden\"]=false;\r",
							"}  else if (responseCode.code === 404) {\r",
							"    tests [\"Not Found. Check if you made correct request\"]=false;\r",
							"}  else if (responseCode.code === 422) {\r",
							"    tests [\"The instance is not valid\"]=false;\r",
							"}  else {\r",
							"    tests [\"Something went wrong. Check response body\"]=false;\r",
							"}\r",
							"\r",
							"pm.test(\"ID is in response\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"'Details' is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonResponse.message).to.be.a('string');\r",
							"    pm.expect(jsonResponse.details).to.be.a('object');\r",
							"    pm.expect(jsonResponse.details.cant_find).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "Oj_LslFiY7YjTj-CwrUMmRCnhcFJaqzlWKITWVXhsnw.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA2LTMwVDA2OjQ3OjI5LjQwMVoiLCJ1aWQiOiI1NjVhNzFiMy1jNWE2LTQ3NjMtODYxYS1mYzc4MjFiZTA1NjciLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImUzY2E3MzZmLTA0MDctNDMxNy1hZWU3LWQ3Y2Y4MjU0ZTQyYiIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNi0zMFQxMDo0NzoyOS40MDFaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}